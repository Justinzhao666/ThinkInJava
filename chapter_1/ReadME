#
# Thinking in JAVA 笔记及后感 * 第1章：对象讨论
#

# 面向对象语言5个基本特征：
（1）万物皆对象；
（2）程序是对象的结合，它们通过发送消息来通知彼此要做的；@ 任何Java程序都是各种类组成的，每个类通过给定自己的接口来与其他类进行通信。
（3）每个对象都有自己的由其他对象所构成的存储；@ 对象其实就是：数据结构+算法（也可以说是方法），每个对象内存空间无非就是一系列其他对象组成的堆块。
（4）每个对象都有其类型；
（5）某一特定类型的所有对象都可以接受同样的消息；@ 同一类的对象，可以表达的行为自然一致

# 程序员分为：类创建者，客户端程序员；
（1）类创建者目标是 构建类
    类构建者不应该任意的暴露自己类的接口，只暴露必要的接口！更多的隐藏实现细节！
    @ 为什么这么做：要将你自己编写的代码作为一个类库来看待，你编写的类库（可能是工作项目中一个小模块）是为了给外界提供某些功能，所以只需要暴露这些功能的接口就行了。
    @ 存在某些情况（?），你不希望程序员可以触及到他们不应该触及的地方时候要控制访问。
    @ 而且在用户用你的对象.的时候，出现的选择项也少了很多，不然会弹出一堆接口，也不知道用哪个，这样也方便程序员。
（2）客户端程序员目标是 搜集各种可以用来实现 快速 应用开发的类。

# Java访问权限： private、public、protect、包访问权限

# 代码复用：
 @ 最基本的是函数
（1）组合：内嵌成员对象一般申明为private
（2）继承
 @ 在构建一个新类的时候，优先考虑组合，其次为继承。不是处处都应该用继承，组合比继承更加的简单灵活！只有必须使用继承的场合下才使用继承：比如多态的使用，只有继承。

# 继承：
@ 针对继承，在项目发布之后，当你修改了父类的之后，起所有的子类都会受到影响！这在某些时候，是十分恶劣的，有可能一改全改，项目依赖太多就很难维护。
@ 所以在项目设计阶段就要考虑今后对增加打开，修改关闭。
（1）是一个：纯粹替换，一种理想的继承，子类和父类拥有完全一样的接口，这样子类对象可以完全被基类对象替换（里氏替换原则）；
（2）像一个：子类加了新接口，父类依然可以替代子类对象，但是访问不了新增的接口。不完美的替换。

# 多态
@ 多态本质就是父类引用指向子类对象，表现出子类特效（父类对象调用子类方法）。
java通过后期绑定，使得对象要调用的代码只有在运行时才能被确定。

# Java是单继承的，除了C++意外的所有OOP语言都是单继承的。总基类就是Object。
@ 多继承虽然具备更好的灵活性，但是父类成员冲突等问题导致脉络不清晰。单继承好处很多，继承关系清晰，易于开发和维护，更何况还有接口。

# 容器（集合）
可以随时扩改变自己来容纳数据的封装类，具体内存处理由内部实现。
ArrayList：动态数组，查找快，序列中间增删难；
LinkedList：链表，查找慢，增删快；
# 泛型
@ 针对容器来讲，泛型使得容器成为定制化的容器：让改容器只能存入和取出特定<T>类型的对象。

# 内存泄漏：
创建出对象，使用完毕后不被销毁，长期占据着内存（Java的GC有效避免这点）

# 异常：
异常是一种对象，从错误点被抛出，由相应的异常捕获器来捕获。

# 并发：
@ 单核处理器：并发
@ 多核处理器：并行
@ 并发要处理好[共享资源/临界区]的同步！
