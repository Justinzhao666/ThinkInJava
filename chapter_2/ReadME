#
# Thinking in JAVA 笔记及后感：* 第2章：对象讨论
#

# Java中使用引用来操作对象，对象必须是new出来的，只有new了才会分配内存，成为一个对象。

# 存储区
（1）寄存器：最快的存储区，数量有限，java语言不可以直接控制；
（2）堆栈：RAM中（随机访问存储区），对象的引用等存储在这；
（3）堆区：也位于RAM中，存放所有的Java对象；
（4）常量存储区：一般放在代码段中，也可以放在ROM（只读存储区）中，不可以修改，字符串池也在这个区域中；
（5）非RAM存储：就是磁盘设备了，实例：持久化流对象。

# 基本类型：java的基本数据类型不随操作系统变化而变化，保证可移植性强。
boolean、char|2、byte、short|2、int、long|8、float|4、double|8、void
@ 注意 char在java中占2字节，因为他采用Unicode编码，表示字符更多。
  基本数据类型和其包装类可以互相转换，自动拆箱和自动装箱
# Java提供两个高精度的类BigInteger和BigDecimal可以表示任何大小和精度的数值

# 数组：java对数组有越界检查，更加安全，当然牺牲一点性能

# 作用域：申明的变量只有在其{ }，以及其子{ }范围内起作用！并且子级的{}中的变量不可以和父级的同名！
@ {int i=2； { int i =1;//非法 } } ：设计者认为这种书写十分混乱。

# 类
（1）类的成员变量都默认初始化，但是程序的局部变量不初始化！
（2）对象调用某个方法可以理解为：向该对象发送消息:-D
（3）Java针对对象来说，传递的都是引用!

# 包名的命名：为了保证你写的代码全球唯一，不会导致和别人写的同类名互冲突，采用自己的域名小写的倒叙来命名包。
import com.xxx.*;这个没有什么不好的。其实很常用。

# static：属于一个类，而不是一个方法，被static标记的内存中都只有一份。

# main(String[] args) 里面的参数是java编译器要求的，至于为什么（?）不知道。

# Java的GC，只会GC那些失去了引用的对象，引用在程序使用完了会在栈内弹出。GC会在"任意时刻"将对象内存回收!

# 构建：将源代码生成可执行文件过程的自动化程序。gradle，maven等。

# javadoc：需要去看文档！多使用比较好！

# 编码规范：sun公司的“Java编程规范编码约定”