#
# Thinking in JAVA 笔记及后感：* 第3章：操作符
#

# 静态导入:JavaSE5 新加。第6章介绍，使用静态导入后可以直接使用一些封装的函数。
使用方式:import static packageName;

# 运算符的优先级：先乘除后加减，有括号先算括号里面的。

# 引用操作对象：基本数据类型的赋值是将内容复制到指定地方，而对象赋值的时候我们操作的是引用

## Java对对象的操作其实都是操作的引用，当对象不再被引用的时候，会被自动GC。-----引用即别名，一块堆内存区（实际对象）可以有多个别名（引用）
## Java中函数的参数传递也是传递的对象的引用，基本数据类型是传值，C++中的浅复制！

# 算术运算符
# +，-，*，/，%
# 除法采用的是截断法，不会四舍五入。如果想要四舍五入需要使用Math.round()库函数来操作。本节引申Random：RandomDemo.java

# 一元运算符:
# -var, +var, var++, var--

# 关系运算符:
# <, >, ==, <=, >=, !=
## ==和!=比较的是对象的引用（即地址）
## equals() 比较的是内容，Java的封装类（比如基本数据类型包装类）可以使用equals来比较内容。（因为包装类已经写好了equals覆盖方法）
## 但是自定义的类对象要比较内容需要override原来的equals方法，因为equals默认的行为是比较引用的。

# 逻辑运算符
# &&, ||, !
# 注意逻辑运算中判断的 短路特性！

# 直接常量：直接用进制表示的数后面接上f/F(float),l/L(long),d/D(double)的代表直接常量，如3.14f/0x23f
# 0x(0~9,a-f):十六进制
# 0（1-7）:八进制
# 将常亮以二进制形式现实的函数：toBinaryString()!
## Java中小数常量默认为float型， 所以double num = 3.14会有问题，应该改为3.14f

# 位运算符：
# & : 有0 则 0
# | : 有1 则 1
# ^ : 同 则 0 , 异 则 1（只有1^0 = 1,00 11都是0）
# ~ : 取反
# 没有短路特性
# << : 左移：低位补0
# >> : 右移：有符号的话，正号高位插0 负号高位插1
# >>>: 无符号右移：无论正负都在高位插入0
# <<= : 移位并赋值
# >>= : 移位并赋值
# >>>=: 移位并赋值

# 三目运算符
# boolean ? value0 : value1
## value0 和 value1 必须是表达式子，不能是语句。

# 字符串操作符号
# +, +=
# Java不可以像C++那样重载操作符，+=是被写好了的。

# java中是不会出现 while(a = b) 这种错误的，编译就会报错（非0值不代表就是True）

# Java类型转换，低精度会隐式转换为高精度；高精度转低精度需要(类型)var强制转换，不过会丢失信息！

# Java没有sizeof,因为在所有平台上Java的数据类型所占字节数都是一样的，所以它很容易跨平台和移植。

